@model IEMS_WEB.Models.WorkFlow.WorkFlowObject

@{
    ViewBag.Title = "WorkFlowCreation";
    Layout = "~/Views/Shared/_Layout.cshtml";
} 
<script src="~/assets/js/translator/workflowcreation.js"></script>
@* <script src="https://unpkg.com/gojs/release/go.js"></script> *@
<script src="~/assets/js/go.js"></script>

@* <script src="~/release/highlight.js"></script>
<script src="~/release/goDoc.js"></script> *@


<style>
    .ui-dialog-titlebar.ui-widget-header.ui-corner-all.ui-helper-clearfix {
        background-image: url(/Images/Header.png);
        background-repeat: no-repeat;
        background-size: 100%;
    }

    button.multiselect.dropdown-toggle.btn.btn-default {
        width: 257px !important;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        button.multiselect.dropdown-toggle.btn.btn-default span {
            word-break: break-word;
            white-space: nowrap;
            width: 50px;
            overflow: hidden;
        }

    .page-header {
        margin: 0px 0 20px !important;
    }

    .logo-wrapper {
        padding: 5px 23px !important;
    }

    .page-wrapper.compact-wrapper .page-header {
        margin-left: 250px !important
    }
</style>

<script type="text/javascript">

    function addNodeAndLink(e, obj) {
        debugger;
        $.ajax({
            type: "POST",
            url: "/WorkFlowRule/GetStageDetails",
            async:false,
            data: { "StageKey": obj.part.data.key, "category": obj.part.data.category, "hdnStatus": $("#hdnStatus").val() },
            success: function (response, textStatus, jqXHR) {
                debugger;
                var ct = jqXHR.getResponseHeader("Content-Type");
                var mx = ct.match("text\/html");
                if (mx != null) {




                    $("#dialog").dialog("option", "title", "Stage Setting").dialog('open');

                    $('#dialog').html(response);
                    var selectedLanguage = $("input[name='language']:checked").val();

                    if (selectedLanguage === "en") {
                        $('#dialog').dialog("option", "title", 'Stage Setting').attr('data-translate', 'Stage Setting');
                    } else if (selectedLanguage === "hi") {
                        $('#dialog').dialog("option", "title", 'स्टेज सेटिंग').attr('data-translate', 'स्टेज सेटिंग');
                    }

                    StageId = 0;
                } else {
                    if (response.StatusId == "0") {
                        swal({ title: '', text: response.message, type: 'success', showConfirmButton: true });
                        StageId = response.StageId;
                    }
                    else if (response.StatusId == "-1") {
                        swal({ title: '', text: response.message, type: 'warning', showConfirmButton: true });
                        return false;
                    }
                }

            }

        });
    }
    function addConditionalParam(jsonval, event, objectval) {
        debugger;
        var StageId = 0;
        $.ajax({
            type: "POST",
            url: "/WorkFlowRule/GetStageConditionalParam",
            data: { "StageKey": objectval.part.data.key, "jsonval": JSON.stringify(jsonval), "category": objectval.part.data.category, "BObjId": $("#hdnBusinessObjectId").val(), "WorkFlowObjectId": $("#hdnWorkFlowObjectId").val(), "hdnStatus": $("#hdnStatus").val() },
            async: false,
            success: function (response, textStatus, jqXHR) {
                debugger;
                var ct = jqXHR.getResponseHeader("Content-Type");
                var mx = ct.match("text\/html");
                if (mx != null) {
                    $("#dialog").dialog("option", "title", "Condition Builder").dialog('open');



                    // Assuming the dialog is not yet open, you can open it after setting the title
                    $('#dialog').dialog('open');


                    $('#dialog').html(response);
                    var selectedLanguage = $("input[name='language']:checked").val();

                    if (selectedLanguage === "en") {
                        $('#dialog').dialog("option", "title", 'Condition Builder').attr('data-translate', 'Condition Builder');
                    } else if (selectedLanguage === "hi") {
                        $('#dialog').dialog("option", "title", 'कंडीशन बिल्डर').attr('data-translate', 'कंडीशन बिल्डर');
                    }
                    StageId = 0;
                } else {
                    if (response.StatusId == "0") {
                       //alertwithredirect('Success', response.message, 'warning', '@Url.Action("WorkFlowCreate", "WorkFlowRule")');
                        swal({title: '', text: response.message , type: 'warning',showConfirmButton: true});
                        StageId = response.StageId;
                    }
                }
            }
        });
        return StageId;
    }
    function fn_deletenode(data) {
        debugger;
        var bResult = false;

        $.ajax({
            type: "POST",
            url: "/WorkFlowRule/CheckNodeDetails",
            dataType: "json",
            async: false,
            data: { "Key": data },
            success: function (data1) {
                if (data1.StatusId == 1) {
                    if (confirm(data1.message)) {
                        debugger;
                        $.ajax({
                            type: "GET",
                            url: "/WorkFlowRule/DeleteNode",
                            dataType: "json",
                            async: false,
                            data: { "Key": data },
                            success: function (data) {
                                debugger;
                                if (data == 1) {
                                    bResult = true;
                                } else {
                                    bResult = false;
                                }
                            }
                        });
                    }
                    else {
                        bResult = false;
                    }
                }
                else if (data1.StatusId == 0) {
                    debugger;
                    $.ajax({
                        type: "POST",
                        url: "/WorkFlowRule/DeleteNode",
                        dataType: "json",
                        async: false,
                        data: { "Key": data },
                        success: function (data) {
                            debugger;
                            if (data == 1) {
                                bResult = true;
                            } else {
                                bResult = false;
                            }
                        }
                    });
                } else {
                    swal({ title: '', text: "Something Went Wrong,Please try again later", type: 'warning', showConfirmButton: true });
                    return false;
                }
            }
        });
        return bResult;
    }

    function BtnSaveDraft() {
        var bResult = false;
        var hdnOutPutConditionBuilder = $("#hdnOutPutConditionBuilder").val();
        if (hdnOutPutConditionBuilder == undefined || hdnOutPutConditionBuilder == "" || hdnOutPutConditionBuilder == null) {
            hdnOutPutConditionBuilder = "";
        }
        $.ajax({
            type: "POST",
            url: "/WorkFlowRule/SaveWorkFlowDraftDetails",
            dataType: "json",
            async: false,
            data: { "hdnOutPutConditionBuilder": hdnOutPutConditionBuilder, "bObjId": $("#hdnBusinessObjectId").val(), "WorkFlowObjectId": $("#hdnWorkFlowObjectId").val() },
            success: function (data) {
                debugger;

                if (data.StatusId == 1) {
                    bResult = data.statusId;
                    alert(data.message)

                    swal({ title: '', text: data.message, type: 'success', showConfirmButton: true });

                   //alertwithredirect('Success', data.message, 'success', '@Url.Action("WorkFlowView", "WorkFlowRule")');
                    @*// alertwithredirect('Success', data.message, 'success', '@Url.Action("WorkFlowView", "WorkFlowRule")');*@
                }
                else if (data.statusId == -1) {
                    swal({ title: '', text: "Something Went Wrong,Please try again later", type: 'warning', showConfirmButton: true });
                    return false;
                }
            }
        });
    }

    function BtnSave() {
        debugger;
        var bResult = false;
        var hdnOutPutConditionBuilder = $("#hdnOutPutConditionBuilder").val();
        if (hdnOutPutConditionBuilder == undefined || hdnOutPutConditionBuilder == "" || hdnOutPutConditionBuilder == null) {
            hdnOutPutConditionBuilder = "";
        }
        $.ajax({
            type: "POST",
            url: "/WorkFlowRule/SaveWorkFlowDetails",
            dataType: "json",
            async: false,
            data: { "hdnOutPutConditionBuilder": hdnOutPutConditionBuilder, "bObjId": $("#hdnBusinessObjectId").val(), "WorkFlowObjectId": $("#hdnWorkFlowObjectId").val() },
            success: function (data) {
                debugger;
                //if (data.statusId == 1) {
                //    bResult = data.statusId + "~" + data.CurrStageId;
                //}
                if (data.StatusId == 2) {
                    swal({ title: '', text: data.message, type: 'warning', showConfirmButton: true });
                  //  alert(data.message);
                    bResult = data.statusId + "~" + data.CurrStageId;
                }
                else if(data.StatusId == 1){
                    ////alertwithredirect('Success', data.message, 'success', '@Url.Action("WorkFlowView", "WorkFlowRule")');
                    swal({
                        title: '',
                        text: data.message,
                        type: "success"
                    }).then(function () {
                        debugger
                        window.location.href = "../WorkFlowRule/WorkFlowView";
                    });
                    bResult = data.statusId + "~" + data.CurrStageId;
                }
                  //  WorkFlowID
                else {
                    swal({ title: '', text: data.message, type: 'warning', showConfirmButton: true });
                    bResult = data.statusId + "~" + data.CurrStageId;
                }
            }
        });
        return bResult;
    }

    $(document).ready(function () {
        $('.panel-group').click(function () {
            $(this).find('i').toggleClass('glyphicon-plus').toggleClass('glyphicon-minus');
        });
        var start = $("#txtStartNode").val();
        if(start == 1){
            $("#btnStart").hide();
        }
        else{
            $("#btnStart").show();
        }

        //$("#dialog").dialog('close');
        $("#dialog").dialog({
            autoOpen: false,
            modal: true,
            title: "Stage Setting",
            height: 550,
            width: "67%",
            resizable: false,
            draggable: false
        });
        $("#dialog").dialog({
            open: function () {
                $(this).closest(".ui-dialog")
                .find(".ui-dialog-titlebar-close")
                .removeClass("ui-dialog-titlebar-close")
                .html("<span class='ui-button-icon-primary ui-icon ui-icon-closethick'></span>");
            }
        });

        $("#btnClose").click(function (e) {
            window.location.href = "/WorkFlowRule/WorkFlowView";
        });
    });
</script>

@if (Model.statusId == 2)
{
    <script type="text/javascript">
        swal({ title: '', text: @Model.message , type: 'warning', showConfirmButton: true });
    </script>
}
<script id="code">

    function DrawStart() {
        myDiagram.startTransaction("make new node");
        myDiagram.model.addNodeData({ category: "Start", text: "Start" });
        myDiagram.commitTransaction("make new node");
        $("#btnStart").hide();
    }
    function DrawStage() {
        $(document).scrollTop($(document).height());

        myDiagram.startTransaction("make new node");
        myDiagram.model.addNodeData({ category: "Stage", text: "Stage" });
        myDiagram.commitTransaction("make new node");
    }
    function setStageText(StageName, StageKey) {
        var node = myDiagram.findNodeForKey(StageKey);
        myDiagram.select(node);
        var vv = myDiagram.selection.first();
        var v1 = vv.data;
        debugger;// get the first node data
        myDiagram.model.startTransaction();
        myDiagram.model.setDataProperty(v1, 'text', StageName);
        myDiagram.model.commitTransaction("setProperty");
    }
    function save() {
        debugger;
        $("#hdnOutPutConditionBuilder").val(JSON.stringify(myDiagram.model.toJson()));
        var bResult = BtnSave();
        var sResult = bResult.split('~');
        if (sResult[0] == 2) {
            var node = myDiagram.findNodeForKey(sResult[1]);
            myDiagram.select(node);
        }
    }
    function SaveDraft() {
        debugger;
        $("#hdnOutPutConditionBuilder").val(JSON.stringify(myDiagram.model.toJson()));
        var bResult = BtnSaveDraft();
        //var sResult = bResult.split('~');
        //if (sResult[0] == 2) {
        //    var node = myDiagram.findNodeForKey(sResult[1]);
        //    myDiagram.select(node);
        //}
    }


    function addConditionNodeLink(e, obj) {
        debugger;
        // alert(obj.part.key);
        var node = myDiagram.findNodeForKey(obj.part.key);
        //var node = obj.part;
        debugger;
        if (node.data.category.toLowerCase() == "start") {
            var nodeCount = node.findNodesConnected().count;
            if (nodeCount == 0) {
                swal({ title: '', text: "No Stages are Connected to the Start Block", type: 'warning', showConfirmButton: true });
                return false;
            }
        }
        //var CheckConnection = true;
        //var it = node.findNodesOutOf();
        //while (it.next()) {
        //    debugger;
        //    var child = it.value;
        //    if (child.data.category.toLowerCase() == "conditional") {
        //        alert("Connection cannot be placed between Two Conditional Node");
        //        CheckConnection = false;
        //        var node = myDiagram.findNodeForKey(child.data.key);
        //        myDiagram.startTransaction();
        //        myDiagram.remove(node);
        //        myDiagram.commitTransaction("deleted node");
        //        return false;
        //    }
        //}
        //if (CheckConnection == false) {
        //    return false;
        //}

        //node.findNodesConnected().each(function (n) {
        //    if (n.containingGroup !== node.containingGroup) { alert(n.data.key); }
        //});

        //for (var lit = node.findLinksConnected(port.portId) ; lit.next() ;) {
        //    var dfdddd = lit;
        //}
        var json = myDiagram.model.toJson();
        //addConditionalParam(function (result) {
        //    addConditionalParam(json, e, obj);
        //});
        var StageId = addConditionalParam(json, e, obj);
        if (StageId != 0) {
            var node = myDiagram.findNodeForKey(StageId);
            myDiagram.select(node);
        }
        // return aaa;
    }
    function DeleteNode(e, obj) {
        //$.ajax({
        //    type: "GET",
        //    url: "/WorkFlowRule/DeleteNode",
        //    dataType: "json",
        //    data: null,
        //    success: function (data) {
        //        if (data == "1") {
        //            var node = myDiagram.findNodeForKey(obj.part.data.key);
        //          //  reinit();
        //            if (node !== null) {
        //                myDiagram.startTransaction();
        //                myDiagram.remove(node);
        //                myDiagram.commitTransaction("deleted node");
        //            }
        //        } else {
        //            alert("unable to delete");
        //            return false;
        //        }

        //    }
        //});
        var bl = confirm("Do you want to delete the " + obj.part.data.category + " Node");
        if (bl) {
            debugger;
            var bResult = fn_deletenode(obj.part.data.key);

            if (bResult == true) {
                debugger;
                var node = myDiagram.findNodeForKey(obj.part.data.key);
                myDiagram.startTransaction();
                myDiagram.remove(node);
                myDiagram.commitTransaction("deleted node");

                if (obj.part.data.category.toLowerCase() == "start") {
                    var array = myPalette.model.nodeDataArray;
                    var NewObj = { category: "Start", text: "Start", key: obj.part.data.key, loc: "0 0" };
                    array.push(NewObj);
                    ///  array.push([)
                    var sValue = JSON.stringify(array);
                    myPalette.model.nodeDataArray = JSON.parse(sValue);
                    $("#btnStart").show();
                }
            }
            //var array = myPalette.model.nodeDataArray;
            //var NewObj = { category: "Start", text: "Start", key: obj.part.data.key, loc: "0 0" };
            //  array.push(NewObj);
            // ///  array.push([)
            //  var sValue = JSON.stringify(array);
            //  myPalette.model.nodeDataArray = JSON.parse(sValue);
        }
    }
      function init() {
        // if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
        var $ = go.GraphObject.make;  // for conciseness in defining templates
        var yellowgrad = $(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" });
        var greengrad = $(go.Brush, "Linear", { 0: "#98FB98", 1: "#9ACD32" });
        var bluegrad = $(go.Brush, "Linear", { 0: "#B0E0E6", 1: "#87CEEB" });
        var redgrad = $(go.Brush, "Linear", { 0: "#C45245", 1: "#871E1B" });
        var whitegrad = $(go.Brush, "Linear", { 0: "#F0F8FF", 1: "#E6E6FA" });
        var bigfont = "bold 13pt Helvetica, Arial, sans-serif";
        var smallfont = "bold 11pt Helvetica, Arial, sans-serif";
        myDiagram =
          $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
            {

                "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                "undoManager.isEnabled": true,
                allowHorizontalScroll: true,
                allowVerticalScroll: true,
            });



        myDiagram.addDiagramListener("Modified", function (e) {
            var button = document.getElementById("SaveButton");
            if (button) button.disabled = !myDiagram.isModified;
            var idx = document.title.indexOf("*");
            if (myDiagram.isModified) {
                if (idx < 0) document.title += "*";
                if (idx >= 0) document.title = document.title.substr(0, idx);
            }
        });


        myDiagram.addDiagramListener("LinkDrawn", function (e) {
            debugger;
            var FromNode = e.subject.fromNode;
            var ToNode = e.subject.toNode;
            var ConnectionExist = 0;

            links = FromNode.findLinksConnected();
            while (links.next()) {
                var edge = links.value;
                data = edge.data;
                var LinkfromNode = data['from'];
                var LinkToNode = data['to'];
                if (LinkfromNode == FromNode.data.key && LinkToNode == ToNode.data.key) {
                    if (ConnectionExist > 0) {
                        myDiagram.startTransaction("Edge Delete");
                        myDiagram.model.removeLinkData(data);
                        myDiagram.commitTransaction("Edge Delete");
                        swal({ title: '', text: "Connection already exist", type: 'warning', showConfirmButton: true });

                        return false;
                    } else {
                        ConnectionExist = ConnectionExist + 1;
                    }
                }
                if (LinkfromNode == LinkToNode) {
                    myDiagram.startTransaction("Edge Delete");
                    myDiagram.model.removeLinkData(data);
                    myDiagram.commitTransaction("Edge Delete");
                    swal({ title: '', text: "Connection cannot be provided for the Same Node", type: 'warning', showConfirmButton: true });
                    return false;
                }
            }


        });

        function nodeStyle() {
            return [

              new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
              {
                  // the Node.location is at the center of each node
                  locationSpot: go.Spot.Center
              }
            ];
        }


        function makePort(name, align, spot, output, input) {
            var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);
            // the port is basically just a transparent rectangle that stretches along the side of the node,
            // and becomes colored when the mouse passes over it
            return $(go.Shape,
              {

                  fill: "transparent",  // changed to a color in the mouseEnter event handler
                  strokeWidth: 0,  // no stroke
                  width: horizontal ? NaN : 8,  // if not stretching horizontally, just 8 wide
                  height: !horizontal ? NaN : 8,  // if not stretching vertically, just 8 tall
                  alignment: align,  // align the port on the main Shape
                  stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),
                  portId: name,  // declare this object to be a "port"
                  fromSpot: spot,  // declare where links may connect at this port
                  fromLinkable: output,  // declare whether the user may draw links from here
                  toSpot: spot,  // declare where links may connect at this port
                  toLinkable: input,  // declare whether the user may draw links to here
                  cursor: "pointer",  // show a different cursor to indicate potential link point
                  mouseEnter: function (e, port) {
                     // the PORT argument will be this Shape
                      if (!e.diagram.isReadOnly) port.fill = "rgba(255,0,255,0.5)";
                  },
                  mouseLeave: function (e, port) {
                      port.fill = "transparent";
                  }
              });
        }

        function textStyle() {
            return {
                margin: 8,
                wrap: go.TextBlock.WrapFit,
                textAlign: "center",
                editable: true,
                font: bigfont
            }
        }
        function fn_addNodeAndLink(e, obj) {
            ///   var node = myDiagram.findNodeForKey("-1");
            ///    myDiagram.select(myDiagram.findNodeForKey("-1"));
            addNodeAndLink(e, obj);
        }
        // define the Node templates for regular nodes
        myDiagram.addDiagramListener("ExternalObjectsDropped", function (e) {

            var newnode = myPalette.selection.first(); //always dropping from palette
            if (newnode.data.category.toUpperCase() == "START" || newnode.data.category.toUpperCase() == "END") {
                var dupe = isDupe(newnode.data);
                if (dupe) { //already in diagram, remove the duplicate
                    myDiagram.commandHandler.deleteSelection();
                }
                else { // new node to add to diagram
                    myPalette.commandHandler.deleteSelection(); //reomve from palette
                }
            }

        });
        //checks the duplicate node exists or not
        function isDupe(data) {
            debugger;
            var el = myDiagram.findNodeForData(data);
            var b = el != null;
            return b;
        }
        function canBeChild(node1, node2) {
            debugger;
            if (!(node1 instanceof go.Node)) return false; // must be a Node
            if (node1 === node2) return false; // cannot be child of yourself
            if (node2.isInTreeOf(node1)) return false; // already have a parent
            return true;
        }
        function dropOntoNode(e, node) {
            debugger;
            var diagram = node.myDiagram;
            var selnode = diagram.selection.first(); // assume just one Node in selection
            // should do a duplicate check?
            if (canBeChild(selnode, node)) {
                // find any existing link into the selected node
                var link = selnode.findTreeParentLink();
                if (link !== null) { // reconnect any existing link
                    link.fromNode = node;
                } else { // else create a new link
                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                }
            }
        }

        function makeButton(text, action, visiblePredicate) {
            return $("ContextMenuButton",
                {
                    "ButtonBorder.fill": "white",
                    "_buttonFillOver": "skyblue",
                    "_buttonFillNormal": "skyblue",
                },
              $(go.TextBlock, text),
              {
                  click: action,

              },
              // don't bother with binding GraphObject.visible if there's no predicate
              visiblePredicate ? new go.Binding("visible", "", function (o, e) { return o.diagram ? visiblePredicate(o, e) : false; }).ofObject() : {});
        }

        if(@Model.ApprovalStatus==0){
            var partContextMenu =
                $("ContextMenu", {
                    width: 150 // Set the desired width
                },
             makeButton("Stage Setting",

               function (e, obj) {
                   fn_addNodeAndLink(e, obj);
               }), makeButton("Delete Stage" ,
               function (e, obj) {
                   //var contextmenu = obj.part;
                   //var part = contextmenu.adornedPart;
                   DeleteNode(e, obj);
               }), makeButton(" Condition Builder ",
               function (e, obj) {
                   addConditionNodeLink(e, obj);
               })
           );
        }
        else
        {
            var partContextMenu =
           $("ContextMenu",
             makeButton("Stage Setting",
               function (e, obj) {
                   fn_addNodeAndLink(e, obj);
               }), makeButton(" Condition Builder ",
               function (e, obj) {
                   addConditionNodeLink(e, obj);
               })
           );
        }

        myDiagram.nodeTemplateMap.add("",  // the default category
          $(go.Node, { contextMenu: partContextMenu }, "Table", nodeStyle(),
            // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
            $(go.Panel, "Auto",
              $(go.Shape, "Rectangle",
                { desiredSize: new go.Size(90, 90), fill: greengrad, stroke: "white" },
                new go.Binding("figure", "figure"), new go.Binding("fill", "color")),
              $(go.TextBlock, textStyle(),
                {
                    margin: 8,
                    maxSize: new go.Size(160, NaN),
                    wrap: go.TextBlock.WrapFit,
                    editable: false
                },
                {
                    toolTip:  // define a tooltip for each node that displays the color as text
                        $("ToolTip",
                          $(go.TextBlock, { margin: 7 },
                            new go.Binding("text", "text"))
                        ),
                },
                new go.Binding("text").makeTwoWay())),
            // four named ports, one on each side:
            makePort("T", go.Spot.Top, go.Spot.TopSide, false, true),
            makePort("L", go.Spot.Left, go.Spot.LeftSide, true, true),
            makePort("R", go.Spot.Right, go.Spot.RightSide, true, true),
            makePort("B", go.Spot.Bottom, go.Spot.BottomSide, true, false),
             $(go.Shape, "Ellipse",
              {
                  alignment: go.Spot.TopRight,
                  click: function (e, button) {
                      e.diagram.commandHandler.showContextMenu(button.part);
                  }
              }, { width: 10, height: 10 })));


        myDiagram.nodeTemplateMap.add("Start",

          $(go.Node, "Table", { contextMenu: partContextMenu }, nodeStyle(),
            $(go.Panel, "Spot",
              $(go.Shape, "Circle",

                { desiredSize: new go.Size(70, 70), fill: bluegrad, stroke: "white" }),
              $(go.TextBlock, "Start", textStyle(), {
                  margin: 2,
                  width: 60, height: 23,
                  overflow: go.TextBlock.OverflowEllipsis,
                  wrap: go.TextBlock.WrapFit,
                  editable: false
              },{
                  toolTip:  // define a tooltip for each node that displays the color as text
                    $("ToolTip",
                      $(go.TextBlock, { margin: 4 },
                        new go.Binding("text", "text"))
                    ),
                 // contextMenu: partContextMenu  // end of Adornment
              },
                new go.Binding("text"))
            ),
            // three named ports, one on each side except the top, all output only:
            makePort("L", go.Spot.Left, go.Spot.Left, true, true),
            makePort("R", go.Spot.Right, go.Spot.Right, true, true),
            makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, true),
     $(go.Shape, "Ellipse",
              {
                  alignment: go.Spot.TopRight,
                  click: function (e, button) {
                      e.diagram.commandHandler.showContextMenu(button.part);
                  } // this function is defined below
              }, { width: 10, height: 10 })));

       //);


        myDiagram.nodeTemplateMap.add("End",
          $(go.Node, "Table", nodeStyle(),
            $(go.Panel, "Spot",
              $(go.Shape, "Circle",
                { desiredSize: new go.Size(60, 60), fill: "#282c34", stroke: "#DC3C00", strokeWidth: 3.5 }),
              $(go.TextBlock, "End", textStyle(), {
                  margin: 8,
                  maxSize: new go.Size(160, NaN),
                  wrap: go.TextBlock.WrapFit,
                  editable: false
              },
                new go.Binding("text"))
            ),
            // three named ports, one on each side except the bottom, all input only:
            makePort("T", go.Spot.Top, go.Spot.Top, false, true),
            makePort("L", go.Spot.Left, go.Spot.Left, false, true),
            makePort("R", go.Spot.Right, go.Spot.Right, false, true)
          ));

        // taken from ../extensions/Figures.js:
        go.Shape.defineFigureGenerator("File", function (shape, w, h) {
            var geo = new go.Geometry();
            var fig = new go.PathFigure(0, 0, true); // starting point
            geo.add(fig);
            fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));
            fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
            fig.add(new go.PathSegment(go.PathSegment.Line, w, h));
            fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());
            var fig2 = new go.PathFigure(.75 * w, 0, false);
            geo.add(fig2);
            // The Fold
            fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));
            fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
            geo.spot1 = new go.Spot(0, .25);
            geo.spot2 = go.Spot.BottomRight;
            return geo;
        });

        myDiagram.nodeTemplateMap.add("Comment",
          $(go.Node, "Auto", nodeStyle(),
            $(go.Shape, "File",
              { fill: "#282c34", stroke: "#DEE0A3", strokeWidth: 3 }),
            $(go.TextBlock, textStyle(),
              {
                  margin: 8,
                  maxSize: new go.Size(200, NaN),
                  wrap: go.TextBlock.WrapFit,
                  textAlign: "center",
                  editable: true
              },
              new go.Binding("text").makeTwoWay()),
                makePort("T", go.Spot.Top, go.Spot.Top, false, true),
              makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
            // no ports, because no links are allowed to connect with a comment
          ));


        // replace the default Link template in the linkTemplateMap

        myDiagram.linkTemplate =
          $(go.Link,  // the whole link panel
            {
                routing: go.Link.AvoidsNodes,
                curve: go.Link.JumpOver,
                corner: 5, toShortLength: 4,
                relinkableFrom: true,
                relinkableTo: true,
                reshapable: true,
                resegmentable: true,
                // mouse-overs subtly highlight links:
                mouseEnter: function (e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                mouseLeave: function (e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; },
                selectionAdorned: false
            },
            new go.Binding("points").makeTwoWay(),
            $(go.Shape,  // the highlight shape, normally transparent
              { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
            $(go.Shape,  // the link path shape
              { isPanelMain: true, stroke: "gray", strokeWidth: 2 },
              new go.Binding("stroke", "isSelected", function (sel) { return sel ? "dodgerblue" : "gray"; }).ofObject()),
            $(go.Shape,  // the arrowhead
              { toArrow: "standard", strokeWidth: 0, fill: "gray" }),
            $(go.Panel, "Auto",  // the link label, normally not visible
              { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5 },
              new go.Binding("visible", "visible").makeTwoWay(),
              $(go.Shape, "RoundedRectangle",  // the label shape
                { fill: "#F8F8F8", strokeWidth: 0 }),
              $(go.TextBlock, "Yes",  // the label
                {
                    textAlign: "center",
                    editable: true
                },
                new go.Binding("text").makeTwoWay())
            )
          );


        function showLinkLabel(e) {
            var label = e.subject.findObject("LABEL");
            if (label !== null) label.visible = (e.subject.fromNode.data.category === "Conditional");
        }

        function CheckNode(e, link) {
            debugger;
            var fromNode = link.part.data.from;
            var ToNode = link.part.data.to;
        }

        // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
        myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
        myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;



        myDiagram.commandHandler.doKeyDown = function () {
            debugger;
            var e = myDiagram.lastInput;
            var cmd = myDiagram.commandHandler;
            if (e.key === "Del") {  // could also check for e.control or e.shift
                return;
            }
        };

        myPalette =
          $(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
            {
                initialScale: 0.8,
                contentAlignment: go.Spot.Center,
                "contextMenuTool.isEnabled": false,
                // Instead, animate with this function
                nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                model: new go.GraphLinksModel([  // specify the contents of the Palette
                  { category: "Start", text: "Start" },
                  { category: "Stage", text: "Stage" },
                 /// { category: "Conditional", text: "???" }
                ])
            });



        load();
        // { category: "Comment", text: "Comment" }
        // This is a re-implementation of the default animation, except it fades in from downwards, instead of upwards.
        function animateFadeDown(e) {
            var diagram = e.diagram;
            var animation = new go.Animation();
            animation.isViewportUnconstrained = true; // So Diagram positioning rules let the animation start off-screen
            animation.easing = go.Animation.EaseOutExpo;
            animation.duration = 900;

            // Fade "down", in other words, fade in from above
            animation.add(diagram, 'position', diagram.position.copy().offset(0, 200), diagram.position);
            animation.add(diagram, 'opacity', 0, 1);
            animation.start();
        }

    } // end init

    function load() {
        debugger;
        if (document.getElementById("hdnOutPutConditionBuilder").value != "") {
            /// alert(document.getElementById("hdnOutPutConditionBuilder").value);
            ///  var value = document.getElementById("hdnOutPutConditionBuilder").value;
            ///     value = value.replace(/\\/g, "\\");
            ////   alert(value);
            myDiagram.model = go.Model.fromJson(document.getElementById("hdnOutPutConditionBuilder").value);
            var array = [];
            var NewObj = { category: "Stage", text: "Stage", loc: "0 0" };
            array.push(NewObj);
            // ///  array.push([)
            var sValue = JSON.stringify(array);
            myPalette.model.nodeDataArray = JSON.parse(sValue);

        }

    }

    // print the diagram by opening a new window holding SVG images of the diagram contents for each page
    function printDiagram() {
        var svgWindow = window.open();
        if (!svgWindow) return;  // failure to open a new Window
        var printSize = new go.Size(700, 960);
        var bnds = myDiagram.documentBounds;
        var x = bnds.x;
        var y = bnds.y;
        while (y < bnds.bottom) {
            while (x < bnds.right) {
                var svg = myDiagram.makeSvg({ scale: 1.0, position: new go.Point(x, y), size: printSize });
                svgWindow.document.body.appendChild(svg);
                x += printSize.width;
            }
            x = bnds.x;
            y += printSize.height;
        }
        setTimeout(function () { svgWindow.print(); }, 1);
    }
</script>
<style>
  
    /*div#dialog {
            margin-top: -30px;
        }*/
    span.ui-button-icon-primary.ui-icon.ui-icon-closethick {
        float: right;
        margin-top: 0px;
    }

    .ui-dialog.ui-widget.ui-widget-content.ui-corner-all {
        width: 75% !important;
        max-height: 550px !important;
        overflow-y: scroll;
    }

    div#sample {
        width: 84% !important;
        /* display: flex; */
        /* justify-content: space-between; */
        margin-left: 174px !important;
        margin-top: 12px !important;
    }

    .main-content-inner {
        margin-top: -7px;
    }

    .modal-backdrop.in {
        opacity: 0.9 !important;
    }

    div#myPaletteDiv canvas {
        /* top: 38px!important; */
        background-color: whitesmoke;
        border: 1px solid #000;
    }

    div#myDiagramDiv {
        height: 400px !important;
    }

        div#myDiagramDiv canvas {
            background-color: #fff !important;
            border: 1px solid #000;
        }

    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
        background-color: #eee;
        opacity: 1;
        background-color: #fff !important;
        /*border: 0px solid transparent;*/
        margin-top: -3px;
        font-weight: 600 !important;
    }
    /*******************************
    * ACCORDION WITH TOGGLE ICONS
    * Does not work properly if "in" is added after "collapse".
    *******************************/
    .panel-group .panel {
        border-radius: 0;
        box-shadow: none;
        border-color: #EEEEEE;
    }

    .panel-default > .panel-heading {
        padding: 0;
        border-radius: 0;
        color: #212121;
        background-color: beige;
        border-color: #EEEEEE;
    }

    .panel-title {
        font-size: 14px;
    }

        .panel-title > a {
            display: block;
            padding: 15px;
            text-decoration: none;
            font-size: 19px;
        }

    .more-less {
        float: right;
        color: #212121;
        font-weight: 600;
        font-size: 12px;
    }

    .panel-default > .panel-heading + .panel-collapse > .panel-body {
        border-top-color: #EEEEEE;
        border: 1px solid #ccc !important;
    }


    .demo {
        padding-top: 60px;
        padding-bottom: 110px;
    }

    .demo-footer {
        position: fixed;
        bottom: 0;
        width: 100%;
        padding: 15px;
        background-color: #212121;
        text-align: center;
    }

        .demo-footer > a {
            text-decoration: none;
            font-weight: bold;
            font-size: 14px;
            color: #fff;
        }

    .page-header {
        padding-top: 0px;
    }
    /*.accordion-toggle:after {
            color: #aaa;
            content: "\f146";
            display: block;
            font-family: FontAwesome;
            font-size: 10px;
            line-height: 36px;
            position: absolute;
            top: 3px;
            right: 15px;
            }

            .accordion-toggle.collapsed:after {
                content: "\f0fe";
            }*/
</style>
<script>

    $(document).keydown(function (e) {
        if (e.keyCode == 27) return false;
    });
</script>
@if (Model.statusId == -1)  //Error message
{
    <script type="text/javascript">
        alertwithredirect('Warning', Model.message, 'warning', '@Url.Action("WorkFlowView", "WorkFlowRule")');
    </script>
}
@using (Html.BeginForm())
{

    <div class="page-title">
        <div class="row">
            <div class="col-12">
                <h3 data-translate="WorkFlow Details">
                    WorkFlow Details
                   

                </h3>
            </div>
        </div>
    </div>
    <body onload="init()">
     
                    <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">

                        <div class="panel panel-default">
                           
                            <div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                                <div class="panel-body">
                                 
                                        <div class="row">

                                            <div class="col-md-3">
                                <label data-translate="Activity Name:">
                                                    Activity Name:
                                                </label>
                                                @Html.TextBoxFor(m => m.BusinessObjectName, new { @class = "form-control", id = "txtBObjName", @readonly = true })
                                            </div>

                                            <div class="col-md-3">
                                <label data-translate="Name:">
                                                    Name:
                                                </label>
                                                @Html.TextBoxFor(m => m.WorkFlowName, new { @class = "form-control", id = "txtWorkFlowName", @readonly = true })
                                            </div>
                                            <div class="col-md-3">
                                <label data-translate="Description:">
                                                    Description:
                                                </label>
                                                @Html.TextAreaFor(m => m.WorkFlowDescription, new { @class = "form-control", id = "txtWorkFlowDesc", @readonly = true, @style = "resize:none" })
                                            </div>

                                            <div class="col-md-3">
                                <label data-translate="Admin:">
                                                    Admin:
                                                </label>
                                                @Html.TextBoxFor(m => m.WorkFlowHead, new { @class = "form-control", id = "txtWorkFlowHead", @readonly = true })
                                            </div>

                                        </div>

                                  
                                </div>
                            </div>

                        </div>
                    </div>

                  
                        <fieldset class="border p-2">
            <legend class="float-none w-auto p-2" data-translate="WorkFlow Design">WorkFlow Design</legend>
                            <div class="form-horizontal">
                                <div class="main-content-inner">
                                    <div id="CustomPallete">
                        <button type="button" id="btnStart" class="btn btn-primary" value="Start" onclick="DrawStart()" data-translate="Start"><i class="fa fa-play" aria-hidden="true"></i> Start</button>
                        <button type="button" id="btnStage" class="btn btn-success" value="Stage" onclick="DrawStage()" data-translate="Stage"><i class="fa fa-scribd" aria-hidden="true"></i> Stage</button>
                                    </div>
                                    <div id="myPaletteDiv" style="border: solid 1px black; width: 100%; height: 100px;display:none"></div>
                                    <div id="myDiagramDiv" style="border: solid 1px black; width: 100%; height: 500px; margin-top: 3px;"></div>

                                </div>
                                @Html.HiddenFor(m => m.OutPutConditionBuilder, new { @id = "hdnOutPutConditionBuilder" })
                                @Html.HiddenFor(m => m.WorkFlowObjectId, new { @id = "hdnWorkFlowObjectId" })
                                @Html.HiddenFor(m => m.BObjId, new { @id = "hdnBusinessObjectId" })
                                @Html.HiddenFor(m => m.ApprovalStatus, new { @id = "hdnStatus" })
                            </div>
                        </fieldset>
                        <div class="text-center">
            <button type="button" class="btn-info" id="btnSaveDraft" onclick="SaveDraft()" data-translate="Save as Draft">Save as Draft</button>
            <button type="button" class="btn-success" id="btnSave" onclick="save()" data-translate="Save">Save</button>
            <button type="button" class="btn-danger" id="btnClose" data-translate="Close">Close</button>
                       @*      <input type="button" class="btn-info" value="Save as Draft" id="btnSaveDraft" onclick="SaveDraft()" />
                            <input type="button" class="btn-success" value="Save" id="btnSave" onclick="save()" />
                            <input type="button" class="btn-danger" value="Close" id="btnClose" /> *@
                            @Html.TextBoxFor(m => m.StartNode, new { @id = "txtStartNode", @class = "form-control", style = "display:none;" })
                        </div>
                  
           
    </body>
    <div id="dialog" style="display: none">
    </div>
}

@if (Model.ApprovalStatus == 1)
{
    <script type="text/javascript">
        $("#CustomPallete").hide();
        $("#btnSave").hide();
        $("#btnSaveDraft").hide();
    </script>

}
@if (Model.IsStartStage == true)
{
    <script type="text/javascript">
        $("#btnStart").hide();
    </script>

}
<style>
    .modal-open .modal {
        /* z-index: 99 !important; */
        background-color: #f4f4f4;
        /* opacity: .9; */
    }

    .ui-dialog.ui-widget.ui-widget-content.ui-corner-all.ui-front {
        margin-left: 233px !important;
        width: 1043px !important;
        margin-top: 345px;
        z-index: 9999;
    }

    .ui-button-icon-only .ui-icon {
        display: none !important;
    }

    .chosen-drop {
        max-height: 100px !important;
        /*overflow: scroll !important;*/
    }

   
</style>

